# -*- coding: utf-8 -*-
"""數位二甲_111119020_許昀韋.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10HZvHdehPwcoH_eWXISFMYyP5ATx-QnT
"""

# 下載函式庫RandomWords，用於產生隨機單字
!pip install RandomWords

# 挑戰一 v1

# 引入random函式
import random as rd

# 建立文字表
wordsList = ["keyboard", "mouse", "macbook", "website", "python"]

# 隨機取得一個單字
answer = rd.choice(wordsList)
print(answer)

# 用if條件判斷和in運算子判斷答案是否包含猜測的字母
if input("猜一個字母") in answer:
  print("猜中了!")

# 挑戰一 v2
# 使用RandomWords的功能產生隨機單字
# 單字都是小寫

from random_words import RandomWords

def get_random_words(num):
  rw = RandomWords()
  words = rw.random_words(count = num)
  return words

# 取得一個隨機單字
ans = get_random_words(1)[0]

# 印出單字
print(ans)

# 隨機單字中是否包含判斷猜測的字母
if input("猜一個字母") in ans:
  print("猜對了")
else:
  print("猜錯了")

# 挑戰二

ans = get_random_words(1)[0]
print(ans)
test = input("guess: ")
output = ""
for ch in ans:
  if test == ch:
    output += ch + " "
  else:
    output += "_ "
print(output)

# 挑戰二

# 偵測猜測的字母符合答案中的哪些字母
# 回傳答案中符合猜測的索引值表
def guess(test, answer):
  result = []
  for i in range(len(answer)):
    if test == answer[i]:
      result.append(i)
  return result

# 取得一個隨機單字
answer = get_random_words(1)[0]
print(answer)

# test, result, index, output
# 分別表示使用者猜測字母、偵測結果、迴圈用索引、輸出內容
test = input("猜一個字母: ")
result = guess(test, answer)
index = 0
output = ""

# 猜中則輸出字母，否則輸出底線
if test in answer:
  for i in range(len(answer)):
    if index < len(result) and i == result[index]:
      output += answer[i] + " "
      index += 1
    else:
      output += "_" + " "

print(output)

# 挑戰三
# 使用者輸入的猜測、已經猜過的答案

test = ""
guessed = set()

answer = get_random_words(1)[0]
print(answer)

def print_result(guessed):
    output = ""
    for i in range(len(answer)):
      if i in guessed:
        output += answer[i] + " "
      else:
        output += "_ "
    print(output)

while True:

  # 印出目前猜測的結果
  print_result(guessed)

  test = input("猜一個字母: ")

  # 從輸入的內容搜索答案是否有匹配
  if test in answer:
    guessed.update(guess(test, answer))

  if len(guessed) == len(answer):
    print("贏了")
    break

# 挑戰四
# 顯示獲勝及失敗的UI回饋

import HangManUI

# 產生答案
answer = get_random_words(1)[0]
print(answer)

# 使用者輸入的猜測、已經猜過的答案、血量
test = ""
guessed = set()
blood = 6

# 一開始先印出目前的血量的UI
print("你的血量:", blood)
HangManUI.show_hang_man(blood)

while True:

  # 印出目前猜測的結果
  print_result(guessed)

  test = input("猜一個字母: ")

  # 從輸入的內容搜索答案是否有匹配
  if test in answer:
    guessed.update(guess(test, answer))

  # 猜錯則扣一滴血並印出UI
  else:
    blood -= 1
    print("猜錯了，你的血量:", blood)
    HangManUI.show_hang_man(blood)

  # 血量歸零則跳出迴圈
  if blood <= 0:
    print("你死了")
    break

  # 猜對時，印出目前的血量以及猜對的UI
  if len(guessed) == len(answer):
    print("猜對了，你的血量:", blood)
    HangManUI.show_hang_man(7)
    break

# 挑戰五

# 印出可用的字母
def show_keyboard(used):
  output = ""
  for ascii in range(97, 97 + 26):
    ch = chr(ascii)

    # 判斷是否已經被使用過
    if ch in used:
      output += "  "
    else:
      output += ch + " "

    # 判斷換行
    ch = chr(ascii)
    if ch == 'i' or ch == 'r':
      output += "\n"

  print(output)
  print("=================")

# 產生答案
answer = get_random_words(1)[0]
print(answer)

# 已經猜對的答案
guessed = set()

# 血量
blood = 6

# 已經猜過的字母
used = set()

# 一開始先印出目前的血量UI
print("你的血量:", blood)
HangManUI.show_hang_man(blood)

while True:

  # 印出目前猜測的結果
  print_result(guessed)

  # 讓使用者選擇要印出可用字母或是猜測答案
  test = input("猜一個字母，或是輸入「0」顯示未被猜過的字母: ")
  if test == '0':
    show_keyboard(used)
    continue
  else:
    used.add(test)

  # 從輸入的內容搜索答案是否有匹配
  if test in answer:
    guessed.update(guess(test, answer))

  # 猜錯則扣一滴血並印出UI
  else:
    blood -= 1
    print("猜錯了，你的血量:", blood)
    HangManUI.show_hang_man(blood)

  # 血量歸零則跳出迴圈
  if blood <= 0:
    print("你死了")
    break

  # 猜對時，印出目前的血量以及猜對的UI
  if len(guessed) == len(answer):
    print("猜對了，你的血量:", blood)
    HangManUI.show_hang_man(7)
    break